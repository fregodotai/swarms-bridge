{
  "openapi": "3.0.0",
  "components": {
    "examples": {},
    "headers": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {},
    "schemas": {
      "TransactionSignature": {
        "type": "string",
        "description": "Transaction signature as base-58 encoded string"
      },
      "TransactionSignatureResponse": {
        "properties": {
          "transactionSignature": {
            "$ref": "#/components/schemas/TransactionSignature"
          }
        },
        "required": ["transactionSignature"],
        "type": "object"
      },
      "IServiceError": {
        "properties": {
          "message": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        },
        "required": ["message", "reason"],
        "type": "object",
        "additionalProperties": false
      },
      "ErrorResponse_IServiceError_": {
        "properties": {
          "message": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/IServiceError"
          }
        },
        "required": ["message"],
        "type": "object",
        "additionalProperties": false
      },
      "IValidationError": {
        "properties": {
          "constraints": {}
        },
        "required": ["constraints"],
        "type": "object",
        "additionalProperties": false
      },
      "ErrorResponse_IValidationError_": {
        "properties": {
          "message": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/IValidationError"
          }
        },
        "required": ["message"],
        "type": "object",
        "additionalProperties": false
      },
      "DataProviderFeeRequestDto": {
        "properties": {
          "fee": {
            "type": "number",
            "format": "double"
          }
        },
        "required": ["fee"],
        "type": "object",
        "additionalProperties": false
      },
      "CreateSubscriptionResponse": {
        "items": {
          "$ref": "#/components/schemas/TransactionSignature"
        },
        "type": "array"
      },
      "CreateSubscriptionRequestDto": {
        "properties": {
          "dataProvider": {
            "type": "string"
          },
          "recipient": {
            "type": "string"
          },
          "durationInDays": {
            "type": "number",
            "format": "double"
          },
          "nftTokenAccount": {
            "type": "string"
          }
        },
        "required": [
          "dataProvider",
          "recipient",
          "durationInDays",
          "nftTokenAccount"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "SubscriptionListRequestDto": {
        "properties": {
          "subscriber": {
            "type": "string"
          },
          "dataProvider": {
            "type": "string"
          },
          "mySubscriptionsPDA": {
            "type": "string"
          },
          "subscribersListPDA": {
            "type": "string"
          }
        },
        "required": [
          "subscriber",
          "dataProvider",
          "mySubscriptionsPDA",
          "subscribersListPDA"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetSubscriptionStatusResponse": {
        "properties": {
          "status": {
            "type": "string",
            "enum": ["active", "expired", "expiring_soon"]
          }
        },
        "required": ["status"],
        "type": "object"
      },
      "GetProviderTokenAccountResponse": {
        "properties": {
          "tokenAccount": {
            "type": "string"
          }
        },
        "required": ["tokenAccount"],
        "type": "object"
      },
      "PublicKey": {
        "type": "string",
        "description": "A public key"
      },
      "SubscriptionAccount": {
        "properties": {
          "endTime": {
            "type": "number",
            "format": "double"
          },
          "recipient": {
            "type": "string"
          }
        },
        "required": ["endTime", "recipient"],
        "type": "object",
        "additionalProperties": false
      },
      "SubscriberDetails": {
        "properties": {
          "subscriber": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "subscriptionPDA": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionAccount"
          },
          "status": {
            "type": "string",
            "enum": ["active", "expired", "expiring_soon"]
          }
        },
        "required": ["subscriber", "subscriptionPDA", "subscription", "status"],
        "type": "object",
        "additionalProperties": false
      },
      "GetSubscriberDetailsResponse": {
        "properties": {
          "subscriptions": {
            "items": {
              "$ref": "#/components/schemas/SubscriberDetails"
            },
            "type": "array"
          }
        },
        "required": ["subscriptions"],
        "type": "object"
      },
      "RenewSubscriptionRequestDto": {
        "properties": {
          "dataProvider": {
            "type": "string"
          },
          "newRecipient": {
            "type": "string"
          },
          "newEndTime": {
            "type": "number",
            "format": "double"
          },
          "qualityScore": {
            "type": "number",
            "format": "double"
          },
          "nftTokenAccount": {
            "type": "string"
          }
        },
        "required": [
          "dataProvider",
          "newRecipient",
          "newEndTime",
          "qualityScore",
          "nftTokenAccount"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CancelSubscriptionRequestDto": {
        "properties": {
          "dataProvider": {
            "type": "string"
          },
          "qualityScore": {
            "type": "number",
            "format": "double"
          },
          "nftTokenAccount": {
            "type": "string"
          }
        },
        "required": ["dataProvider", "qualityScore"],
        "type": "object",
        "additionalProperties": false
      },
      "GetSubscriptionStateResponse": {
        "properties": {
          "recipient": {
            "type": "string"
          },
          "endTime": {
            "type": "number",
            "format": "double"
          }
        },
        "required": ["recipient", "endTime"],
        "type": "object"
      },
      "GetQualityInfoResponse": {
        "properties": {
          "qualities": {
            "items": {},
            "type": "array"
          },
          "currentIndex": {
            "type": "number",
            "format": "double"
          },
          "quality": {
            "type": "number",
            "format": "double"
          },
          "subscriber": {
            "$ref": "#/components/schemas/PublicKey"
          }
        },
        "required": ["qualities", "currentIndex", "quality", "subscriber"],
        "type": "object"
      },
      "ProgramAddressResponse": {
        "properties": {
          "statePDA": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "qualityPDA": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "subscriptionPDA": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "subscribersListPDA": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "dataProviderFeePDA": {
            "$ref": "#/components/schemas/PublicKey"
          }
        },
        "required": [
          "statePDA",
          "qualityPDA",
          "subscriptionPDA",
          "subscribersListPDA",
          "dataProviderFeePDA"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "RegisterAgentResponse": {
        "properties": {
          "apiKey": {
            "type": "string"
          }
        },
        "required": ["apiKey"],
        "type": "object"
      },
      "RegisterAgentRequestDto": {
        "properties": {
          "id": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["id", "name"],
        "type": "object",
        "additionalProperties": false
      },
      "AlignmentScore": {
        "properties": {
          "agent_id": {
            "type": "number",
            "format": "double"
          },
          "date_created": {
            "type": "string"
          },
          "date_updated": {
            "type": "string"
          },
          "id": {
            "type": "number",
            "format": "double"
          },
          "observation_count": {
            "type": "number",
            "format": "double"
          },
          "overall_score_percentage": {
            "type": "number",
            "format": "double"
          },
          "platform": {
            "type": "string"
          }
        },
        "required": [
          "agent_id",
          "date_created",
          "date_updated",
          "id",
          "observation_count",
          "overall_score_percentage",
          "platform"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Cognition": {
        "properties": {
          "code": {
            "type": "string"
          },
          "id": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["code", "id", "name"],
        "type": "object",
        "additionalProperties": false
      },
      "Twitter": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "agent_id": {
            "type": "number",
            "format": "double"
          },
          "enable_posting": {
            "type": "boolean"
          },
          "expires_at": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "number",
            "format": "double"
          },
          "next_tweet": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "task_id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "access_token",
          "agent_id",
          "enable_posting",
          "expires_at",
          "id",
          "next_tweet",
          "refresh_token",
          "task_id",
          "username"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "AgentFromFrego": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "alignment_scores": {
            "items": {
              "$ref": "#/components/schemas/AlignmentScore"
            },
            "type": "array"
          },
          "behavior_attrs": {
            "type": "string"
          },
          "cognition_cadence": {
            "$ref": "#/components/schemas/Cognition"
          },
          "cognition_memory": {
            "$ref": "#/components/schemas/Cognition"
          },
          "cognition_reasoning": {
            "$ref": "#/components/schemas/Cognition"
          },
          "credits_remaining": {
            "type": "number",
            "format": "double"
          },
          "date_created": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "editor_their_behavior": {
            "type": "string"
          },
          "editor_their_goal": {
            "type": "string"
          },
          "editor_who_they_are": {
            "type": "string"
          },
          "id": {
            "type": "number",
            "format": "double"
          },
          "interval_keep_alive_call": {
            "type": "number",
            "format": "double"
          },
          "is_nft_based": {
            "type": "boolean"
          },
          "linked_nft_id": {
            "type": "string"
          },
          "model_type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "runs": {
            "type": "number",
            "format": "double"
          },
          "tool_cals_available": {
            "type": "string"
          },
          "twitter": {
            "$ref": "#/components/schemas/Twitter"
          }
        },
        "required": [
          "active",
          "alignment_scores",
          "behavior_attrs",
          "cognition_cadence",
          "cognition_memory",
          "cognition_reasoning",
          "credits_remaining",
          "date_created",
          "description",
          "editor_their_behavior",
          "editor_their_goal",
          "editor_who_they_are",
          "id",
          "interval_keep_alive_call",
          "is_nft_based",
          "linked_nft_id",
          "model_type",
          "name",
          "picture_url",
          "runs",
          "tool_cals_available",
          "twitter"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "evaluatedAgentsResponse": {
        "items": {
          "$ref": "#/components/schemas/AgentFromFrego"
        },
        "type": "array"
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    }
  },
  "info": {
    "title": "swarms-bridge",
    "version": "1.0.0",
    "license": {
      "name": "ISC"
    },
    "contact": {}
  },
  "paths": {
    "/fxn/data-provider-fee": {
      "post": {
        "operationId": "SetDataProviderFee",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSignatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProviderFeeRequestDto"
              }
            }
          }
        }
      }
    },
    "/fxn/create-subscription": {
      "post": {
        "operationId": "CreateSubscription",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSubscriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionRequestDto"
              }
            }
          }
        }
      }
    },
    "/fxn/subscription-lists": {
      "get": {
        "operationId": "SubscriptionLists",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSignatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "dataProvider",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/fxn/realloc-subscription-list": {
      "post": {
        "operationId": "ReallocSubscriptionLists",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSignatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionListRequestDto"
              }
            }
          }
        }
      }
    },
    "/fxn/init-my-subscription-list": {
      "post": {
        "operationId": "InitMySubscriptionsList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSignatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionListRequestDto"
              }
            }
          }
        }
      }
    },
    "/fxn/init-subscribers-list": {
      "post": {
        "operationId": "InitSubscribersList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSignatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionListRequestDto"
              }
            }
          }
        }
      }
    },
    "/fxn/add-subscriptions-list": {
      "post": {
        "operationId": "AddSubscriptionsLists",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSignatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionListRequestDto"
              }
            }
          }
        }
      }
    },
    "/fxn/get-subscription-status": {
      "get": {
        "operationId": "GetSubscriptionStatus",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubscriptionStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "endTime",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/fxn/get-provider-token-account": {
      "get": {
        "operationId": "GetProviderTokenAccount",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProviderTokenAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "providerAddress",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/fxn/get-subscriptions-for-provider": {
      "get": {
        "operationId": "GetSubscriptionsForProvider",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubscriberDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "providerPublicKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/fxn/get-subscriptions-for-user": {
      "get": {
        "operationId": "GetAllSubscriptionsForUser",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubscriberDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "providerPublicKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/fxn/renew-subscription": {
      "post": {
        "operationId": "RenewSubscription",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSignatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenewSubscriptionRequestDto"
              }
            }
          }
        }
      }
    },
    "/fxn/cancel-subscription": {
      "post": {
        "operationId": "CancelSubscription",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSignatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelSubscriptionRequestDto"
              }
            }
          }
        }
      }
    },
    "/fxn/get-subscription-state": {
      "get": {
        "operationId": "GetSubscriptionState",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubscriptionStateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "subscriptionPDA",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/fxn/get-quality-info": {
      "get": {
        "operationId": "GetQualityInfo",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetQualityInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "dataProvider",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/fxn/get-program-addresses": {
      "get": {
        "operationId": "GetProgramAddresses",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramAddressResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["FXN"],
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "dataProvider",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "subscriber",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Provide an API key as a query parameter to call request on behalf of the user",
            "in": "query",
            "name": "apiKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/agents/register": {
      "post": {
        "operationId": "RegisterAgent",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["Agents"],
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterAgentRequestDto"
              }
            }
          }
        }
      }
    },
    "/agents/evaluated": {
      "get": {
        "operationId": "GetEvaluatedAgents",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/evaluatedAgentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IServiceError_"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse_IValidationError_"
                }
              }
            }
          }
        },
        "tags": ["Agents"],
        "security": [],
        "parameters": []
      }
    }
  },
  "servers": [
    {
      "url": "https://data.frego.ai/api/v1"
    }
  ]
}
